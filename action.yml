name: ASTDiff Bot
description: A GitHub Action to run RefactoringMiner and upload diff results as a .zip.
branding:
  icon: anchor
  color: blue

inputs:
  URL:
    description: 'URL of the repository for the diff operation'
    required: true
  deploy:
    description: 'Enable deployment process (true or false)'
    required: false
  deployToken:
    description: 'OAuthToken for writing into gh pages'
    required: false
  deployPrefix:
    description: 'Prefix Path of deployment'
    required: false
    default: "cache"
  OAuthToken:
    description: 'OAuthToken for read the commit/pr information (Only required for private urls)'
    required: false
    default: ${{ github.token }}
  
outputs:
  artifact_url:
    description: 'URL to download the generated diff artifact'
    value: ${{ steps.upload_artifact.outputs.artifact-url }}

runs:
  using: 'composite'
  

  steps:
  
    # Step 1: Checkout the repository (in case we need it for any reason)
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Pull the latest RefactoringMiner Docker image from Docker Hub
    - name: Pull RefactoringMiner Docker image
      run: docker pull tsantalis/refactoringminer:latest
      shell: bash 

    # Step 4: Run Docker container with RefactoringMiner
    - name: Run RefactoringMiner to generate diff
      run: |
        mkdir -p ${{ github.workspace }}/exportedFromDocker
        docker run \
          --env OAuthToken="${{ inputs.OAuthToken }}" \
          -v ${{ github.workspace }}/exportedFromDocker:/diff/exported \
          --entrypoint "" \
          tsantalis/refactoringminer:latest /bin/sh -c "\
            refactoringminer diff --url \"${{ inputs.URL }}\" -e && \
            unzip /opt/refactoringminer/lib/RefactoringMiner-DockerBuild.jar -d /tmp/refactoringminer &&
            mkdir -p /diff/exported/web && \
            cp -r /tmp/refactoringminer/web /diff/exported/web/resources"
      shell: bash 

    # Step 5: Create zip artifact of diff results
    - name: Create zip artifact of diff results
      run: |
        cd ${{ github.workspace }}/exportedFromDocker
        zip -r diff_results.zip .
      shell: bash 

    # Step 6: Upload the zip artifact as an output
    - name: Upload diff results as artifact
      id: upload_artifact
      uses: actions/upload-artifact@v4
      with:
        name: diff_results
        path: ${{ github.workspace }}/exportedFromDocker/diff_results.zip 
    
    # Step 7: Set output variable for artifact URL
    - name: Set artifact URL output
      run: echo "::set-output name=artifact_url::${{ steps.upload_artifact.outputs.artifact-url }}"
      shell: bash
      
    - name: Debug
      run: |
        echo ${{inputs.deploy}}
        echo "\n"
        echo ${{ inputs.deploy == 'true' }}
        echo "\n"
        echo "abalfazl"
      shell: bash  

    - name: Path extraction
      if: ${{ inputs.deploy == 'true' }}
      uses: actions/github-script@v6
      id: path_extraction
      with:
          script: |
            const url = core.getInput('commit_url');
            // remove "https://github.com/" and everything after "#"
            const basic_path = url.replace("https://github.com/", "").split("#")[0].replace(/\/$/, "");    
            const path = core.getInput('deploy_prefix') + basic_path; // Add the prefix to the path
            core.setOutput('path', path);

    - name: Checkout gh-pages branch
      uses: actions/checkout@v4
      if: ${{ inputs.deploy == 'true' }}
      with:
        token: ${{ input.deployToken}}
        ref: gh-pages
        path: ${{ steps.path_extraction.outputs.path }}

    - name: Prepare deployment
      shell: bash
      if: ${{ inputs.deploy == 'true' }}
      run: |
        CACHE_DIR=${{ steps.path_extraction.outputs.path }}
        mkdir -p "$CACHE_DIR"
        cd "$CACHE_DIR"
        curl -o diff_results.zip ${{inputs.artifact_url}}
        unzip diff_results.zip
        rm diff_results.zip
        rm -rf json
        mv web/* .
        rmdir web
        ls

    - name: Commit and push changes (Deploy)
      uses: EndBug/add-and-commit@v9
      with:
        cwd: .
        author_name: "GitHub Actions Bot"
        author_email: "github-actions-bot@example.com"
        message: "Deploy update to GitHub Pages + ${{ inputs.commit_url }}"
        push: "origin gh-pages --set-upstream --force"

    - name: Provide Github pages Url
      id: output
      run: |
        gh_pages_url="https://empiricalseconcordia.github.io/RefactoringMiner-Artifacts/${{ steps.path_extraction.outputs.path }}/lists"
        echo "::set-output name=deploy_url::$gh_pages_url"

    # - name: Set output from deploy action
    #   if: ${{ inputs.deploy == 'true' }}
    #   run: echo "::set-output name=deploy_url::${{ steps.deploy.outputs.deploy_url }}"
    #   shell: bash

    
