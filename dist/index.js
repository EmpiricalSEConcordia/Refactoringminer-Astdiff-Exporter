(()=>{var e={6:e=>{"use strict";e.exports=require("@actions/artifact")},545:e=>{"use strict";e.exports=require("@actions/exec")},659:e=>{"use strict";e.exports=require("@actions/core")},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")}},r={};function t(o){var s=r[o];if(void 0!==s)return s.exports;var i=r[o]={exports:{}};return e[o](i,i.exports,t),i.exports}const o=t(659),s=t(545),i=t(928),n=t(6).default,c=t(896);function a(e){return`https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}/artifacts/${e}`}!async function(){try{const e=o.getInput("URL")||process.env.defaultURLValue,r=o.getInput("OAuthToken")||process.env.GITHUB_TOKEN||process.env.defaultOAuthTokenValue,t=o.getInput("screenshot")||process.env.defaultScreenshotValue;console.log(`URL: ${e}`),console.log(`OAuthToken: ${r}`),console.log(`screenshot: ${t}`),function(e,r){if(!e||void 0===e||""===e)throw new Error("URL input is required");if(!r||void 0===r||""===r)throw new Error("OAuthToken input is required")}(e,r);try{console.log("Cloning RefactoringMiner repository..."),await s.exec("git clone --single-branch --branch=exportInfo https://github.com/pouryafard75/RM-ASTDiff.git",{stdio:"inherit",shell:!0}),console.log("Building RefactoringMiner Docker image..."),await s.exec("cd RM-ASTDiff && docker build -f docker/Dockerfile -t tsantalis/refactoringminer:latest .",{stdio:"inherit",shell:!0}),console.log("Done.")}catch(e){console.error(e),process.exit(1)}console.log("Running RefactoringMiner...");const u=process.env.GITHUB_WORKSPACE;console.log(u);const l=i.join(u,"exportedFromDocker");if(c.mkdirSync(l,{recursive:!0}),await s.exec(`docker run       --env OAuthToken="${r}"       -v ${l}:/diff/exported       --entrypoint "/bin/sh"       tsantalis/refactoringminer:latest -c "        refactoringminer diff --url "${e}" -e &&         unzip /opt/refactoringminer/lib/RefactoringMiner-DockerBuild.jar -d /tmp/refactoringminer &&         mkdir -p /diff/exported/web &&         cp -r /tmp/refactoringminer/web /diff/exported/web/resources"`),console.log("Creating zip artifact of diff results..."),await s.exec("zip",["-r","diff_results.zip","."],{cwd:l}),void 0!==process.env.GITHUB_REPOSITORY){const e="diff_results",r=[`${process.env.GITHUB_WORKSPACE}/exportedFromDocker/diff_results.zip`],t=process.env.GITHUB_WORKSPACE,s={continueOnError:!1},i=a((await n.uploadArtifact(e,r,t,s)).artifactId);o.setOutput("artifact_url",i)}if(t&&(console.log("Processing screenshot..."),await s.exec("npm",["install"],{cwd:u}),await s.exec("node",[i.join(u,"src/screenshot.js"),t,l]),console.log("Creating zip artifact for screenshots..."),await s.exec("zip",["-r","screenshots.zip","."],{cwd:i.join(u,"out")}),console.log("Uploading screenshots as artifact..."),void 0!==process.env.GITHUB_REPOSITORY)){const e="screenshots",r=[`${process.env.GITHUB_WORKSPACE}/screenshots.zip`],t=process.env.GITHUB_WORKSPACE,s={continueOnError:!1},i=a((await n.uploadArtifact(e,r,t,s)).artifactId);o.setOutput("screenshots_url",i)}}catch(e){o.setFailed(`Action failed with error: ${e.message}`)}}()})();